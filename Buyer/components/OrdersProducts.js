import React, {Component} from 'react';
import {
  View,
  StyleSheet,
  Text,
  Image,
  Modal,
  Pressable,
  SafeAreaView,
  FlatList,
  ActivityIndicator,
} from 'react-native';
import {SwipeRating, TapRating} from './rating-stars';
import {Header} from 'react-native-elements';
import {Appbar, IconButton, TextInput, Card, Menu} from 'react-native-paper';
import LinearGradient from 'react-native-linear-gradient';
import {Button} from 'react-native-paper';
import AsyncStorage from '@react-native-async-storage/async-storage';
import axios from 'axios';
import {
  UNIVERSAL_ENTRY_POINT_ADDRESS,
  API_FETCH_SINGLE_ORDER,
  API_FEEDBACK_REVIEW_KEY,
  API_ORDER_CANCEL_KEY,
  API_ON_ITEM_RETURNED_BY_BUYER_KEY,
} from '@env';
import {ToastAndroid} from 'react-native';
import {Alert} from 'react-native';
import ReturnProduct from './ReturnProduct';
import {ScrollView} from 'react-native-gesture-handler';
import {Linking} from 'react-native';

const initialState = {
  orderProductsList: [],
  isLoading: true,
  isError: '',

  feedbackModalVisibility: false,
  feedbackContent: '',
  feedbackProductUUID: '',
  feedbackStars: 0,

  is_order_products_returnable: false,

  returnProductModalVisibility: false,
  details_of_product_to_be_returned: {},

  update_status_modal_props_info: {},
  is_update_status_modal_visible: false,
};

export default class OrderProducts extends Component {
  constructor(props) {
    super(props);

    this.state = {
      ...initialState,
    };
  }

  _highlightOrderItem = (want_highlighted_background) => {
    const {orderProductsList: product_details} = this.state;
    let {highlighted_order_item_uuid} = this.props.route?.params;
    product_details.order_items.map((order_item, index) => {
      console.log(order_item);
      if (
        highlighted_order_item_uuid &&
        order_item.uuid == highlighted_order_item_uuid
      ) {
        highlighted_order_item_uuid = null;
        if (want_highlighted_background) {
          setTimeout(
            () =>
              this.order_details_flatlist_ref.scrollToIndex({
                index: index,
                animated: true,
                viewOffset: 80,
              }),
            500,
          );
        }

        order_item.highlight_background = want_highlighted_background;
      }
    });
    this.setState({orderProductsList: product_details});

    if (want_highlighted_background) {
      setTimeout(() => {
        this._highlightOrderItem(false);
      }, 3000);
    }
  };

  _scrollToIndexFailed = (error) => {
    console.log('error while scrolling....', error);
    const offset = error.averageItemLength * error.index;
    this.order_details_flatlist_ref.scrollToOffset({offset});
    setTimeout(
      () => this.order_details_flatlist_ref.scrollToIndex({index: error.index}),
      100,
    );
  };

  async componentDidMount() {
    this._getOrderProductsData();
  }

  _reloadComponent = () => {
    this.setState({...initialState});
    this._getOrderProductsData();
  };

  _getOrderProductsData = async () => {
    const {order_id} = this.props.route?.params;
    const token = await AsyncStorage.getItem('token');
    axios
      .get(UNIVERSAL_ENTRY_POINT_ADDRESS + API_FETCH_SINGLE_ORDER + order_id, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      })
      .then((response) => {
        console.log('order_details = ', response);
        if (response.data.product_order_details.length !== 0) {
          this.setState({
            orderProductsList: response.data.product_order_details[0],
            isLoading: false,
          });

          // To highlight given order in the props - for notification purpose
          const {highlighted_order_item_uuid} = this.props.route?.params;
          if (highlighted_order_item_uuid) {
            this._highlightOrderItem(true);
          }
          // (EXIT) - To highlight given order in the props - for notification purpose
        } else {
          this.setState({
            isError: 'No Products in the order',
            isLoading: false,
          });
        }
      })
      .catch((err) => {
        console.log({...err});
        this.setState({isError: err.response.data.message, isLoading: false});
        alert(err.response.data.message);
      });
  };

  _searchBarToggle = () => {
    const {navigate} = this.props.navigation;
    navigate('Home');
  };

  _autoGeneratedFeedback = (rating) => {
    var feedback = '';
    switch (rating) {
      case 1:
        feedback = 'Terrible Product 👎🏻. ';
        break;
      case 2:
        feedback = 'Bad Product. ';
        break;
      case 3:
        feedback = 'Average Product. ';
        break;
      case 4:
        feedback = 'Good Product. ';
        break;
      case 5:
        feedback = 'Great Product 👍🏻. ';
        break;
    }
    this.setState({feedbackContent: feedback});
  };

  _ratingCompleted = (rating) => {
    this.setState({feedbackStars: rating});
    this._autoGeneratedFeedback(rating);
  };

  _onPressTellUsMore = () => {
    this._autoGeneratedFeedback(4);
    this.setState({
      feedbackStars: 4,
      feedbackModalVisibility: !this.state.feedbackModalVisibility,
    });
  };

  _onFeedbackChange = (feedback) => {
    this.setState({feedbackContent: feedback});
  };

  _toggleProductCardMenu = (index) => {
    const boolean = this.state.orderProductsList.order_items[index]
      .toggle_setting;
    this.state.orderProductsList.order_items[index].toggle_setting = !boolean;
    this.setState({orderProductsList: this.state.orderProductsList});
  };

  //   _onOrderProductCancel = (product_details) => {
  //     console.log('product_detailsproduct_details', product_details);
  //     const cancel_product = async () => {
  //       const token = await AsyncStorage.getItem('token');
  //       axios
  //         .post(
  //           UNIVERSAL_ENTRY_POINT_ADDRESS + API_ORDER_CANCEL_KEY,
  //           {product_order_uuid: product_details},
  //           {
  //             headers: {
  //               Authorization: `Bearer ${token}`,
  //             },
  //           },
  //         )
  //         .then((res) => console.log(res))
  //         .catch((err) => console.log({...err}));
  //     };

  //     Alert.alert('Hold on!', 'Are you sure you want to cancel this product?', [
  //       {
  //         text: 'Cancel',
  //         onPress: () => null,
  //         style: 'cancel',
  //       },
  //       {
  //         text: 'YES',
  //         onPress: () => this.props.navigation.reset({routes: [{name: 'Home'}]}),
  //       },
  //     ]);
  //   };

  _onOrderProductReturn = (product_details, index) => {
    this.setState({
      returnProductModalVisibility: true,
      details_of_product_to_be_returned: product_details,
    });
    this._toggleProductCardMenu(index);
    // const return_product = () => {

    // };

    // Alert.alert('Hold on!', 'Are you sure you want to return this product?', [
    //   {
    //     text: 'Cancel',
    //     onPress: () => null,
    //     style: 'cancel',
    //   },
    //   {
    //     text: 'YES',
    //     onPress: () => return_product(),
    //   },
    // ]);
  };

  _onUpdateStatusModal = (update_status_modal_props_info) => {
    this.setState({
      update_status_modal_props_info: update_status_modal_props_info,
      is_update_status_modal_visible: true,
    });
  };

  _onModalClose = () => {
    this.setState({is_update_status_modal_visible: false});
  };

  _onShipmentTrackingLinkPress = async (redirection_url) => {
    const supported = Linking.canOpenURL(redirection_url);
    if (supported) {
      await Linking.openURL(redirection_url);
    } else {
      Alert.alert(`Don't know how to open this URL: ${redirection_url}`);
    }
  };

  _onRenderOrderProductsList = ({item, index}) => {
    const {feedbackModalVisibility} = this.state;
    let order_product_actions = [];
    if (item.is_product_returnable) {
      order_product_actions.push({
        name: 'Return Product',
        action: () => this._onOrderProductReturn(item, index),
      });
    }
    return (
      <View
        style={{
          paddingVertical: 5,
          backgroundColor: item.highlight_background
            ? 'rgba(66,133,244,0.2)'
            : 'transparent',
        }}>
        <View
          style={{
            ...styles.orderContainer,
            padding: 14,
            paddingTop: !order_product_actions.length ? 14 : 0,
            elevation: feedbackModalVisibility ? 0 : 1,
          }}>
          {item.toggle_setting ? (
            <Card
              style={{
                position: 'absolute',
                top: 6,
                right: 6,
                elevation: 10,
                zIndex: 100,
              }}>
              {order_product_actions.map((data, i) => {
                return (
                  <Menu.Item key={i} title={data.name} onPress={data.action} />
                );
              })}
            </Card>
          ) : null}
          <View
            style={{
              paddingBottom: !order_product_actions.length ? 14 : 0,
            }}>
            <View
              style={{
                flexDirection: 'row',
                alignItems: 'center',
                justifyContent: 'space-between',
              }}>
              <Text style={{fontWeight: 'bold', textTransform: 'uppercase'}}>
                Order Status -{' '}
                <Text
                  style={{
                    flexShrink: 1,
                    textTransform: 'capitalize',
                    fontSize: 14,
                    fontWeight: 'normal',
                  }}>
                  {item.order_status}
                </Text>
              </Text>
              {order_product_actions.length ? (
                <View style={{marginRight: -10}}>
                  <Appbar.Action
                    icon="dots-vertical"
                    onPress={() => this._toggleProductCardMenu(index)}
                  />
                </View>
              ) : null}
            </View>

            {item.order_status_id == 2 && item.shipment_tracking_link ? (
              <View
                style={{
                  borderWidth: 1,
                  borderRadius: 4,
                  width: '100%',
                  alignSelf: 'center',
                  // borderColor: '#4285F4',
                  borderColor: '#F4B400',
                  marginTop: 10,
                  padding: 8,
                }}>
                <Text style={{color: '#F4B400'}}>
                  <Text
                    style={{
                      fontWeight: 'bold',
                      textTransform: 'uppercase',
                    }}>
                    Shipment Tracking Link:{' '}
                  </Text>
                  <Text
                    onPress={() =>
                      this._onShipmentTrackingLinkPress(
                        item.shipment_tracking_link,
                      )
                    }
                    style={{textDecorationLine: 'underline'}}>
                    {item.shipment_tracking_link}
                  </Text>
                </Text>
              </View>
            ) : null}
            {item.order_status_id == 6 && !item.is_shipping_by_seller ? (
              <View
                style={{
                  borderWidth: 1,
                  borderRadius: 4,
                  width: '100%',
                  alignSelf: 'center',
                  borderColor: '#DB4437',
                  marginTop: 10,
                  padding: 8,
                }}>
                <Text style={{color: '#DB4437', textAlign: 'center'}}>
                  <Text
                    style={{fontWeight: 'bold', textTransform: 'uppercase'}}>
                    Important:{' '}
                  </Text>
                  You need to return this product at address -{' '}
                  {
                    item.shipping_address_of_item_to_be_returned
                      .address_line_one
                  }
                  , {item.shipping_address_of_item_to_be_returned.locality},{' '}
                  {item.shipping_address_of_item_to_be_returned.landmark},{' '}
                  {
                    item.shipping_address_of_item_to_be_returned
                      .address_line_one
                  }
                  ,{' '}
                  {
                    item.shipping_address_of_item_to_be_returned
                      .seller_city_name
                  }
                  ,{' '}
                  {
                    item.shipping_address_of_item_to_be_returned
                      .seller_state_name
                  }
                  ,{' '}
                  {
                    item.shipping_address_of_item_to_be_returned
                      .seller_country_name
                  }{' '}
                  - {item.shipping_address_of_item_to_be_returned.pincode}.
                </Text>
              </View>
            ) : null}

            {item.order_status_id == 7 ? (
              <View
                style={{
                  borderWidth: 1,
                  borderRadius: 4,
                  width: '100%',
                  alignSelf: 'center',
                  borderColor: '#DB4437',
                  marginTop: 10,
                  padding: 8,
                }}>
                <Text style={{color: '#DB4437'}}>
                  <Text
                    style={{
                      fontWeight: 'bold',
                      textTransform: 'uppercase',
                    }}>
                    Reason of Rejection:{' '}
                  </Text>
                  <Text>
                    {item.rejection_reason_given_by_seller ||
                      'No reason given by merchant.'}
                  </Text>
                </Text>
              </View>
            ) : null}
          </View>
          <View style={{...styles.horizontalSeparator, marginTop: 0}} />
          <View>
            <Pressable
              onPress={
                !item.toggle_setting
                  ? () =>
                      item.product.is_active === 1
                        ? this.props.navigation.push('Product', {
                            productId: item.product.uuid,
                          })
                        : this._toastMessage('Product is not available.')
                  : () => this._toggleProductCardMenu(index)
              }>
              <View
                style={{
                  flexDirection: 'row',
                  justifyContent: 'space-between',
                  alignItems: 'center',
                  height: 130,
                  marginTop: 10,
                }}>
                <View
                  style={{
                    width: '30%',
                    borderWidth: 1,
                    borderColor: '#dddddd',
                    height: '100%',
                    backgroundColor:
                      item.product.images.length === 0 ? '#eeeeee' : null,
                  }}>
                  {item.product.images.length !== 0 ? (
                    <Image
                      source={{uri: item.product.images[0].image}}
                      style={{
                        width: '100%',
                        height: '100%',
                        resizeMode: 'cover',
                      }}
                    />
                  ) : (
                    <View
                      style={{
                        height: '100%',
                        width: '100%',
                        position: 'absolute',
                        top: 0,
                        left: 0,
                        justifyContent: 'center',
                        alignItems: 'center',
                      }}>
                      <Text
                        style={{
                          fontSize: 12,
                          color: 'red',
                          textAlign: 'center',
                          paddingHorizontal: 10,
                          textDecorationLine: 'line-through',
                        }}>
                        No Image Available
                      </Text>
                    </View>
                  )}
                </View>
                <View
                  style={{
                    width: '70%',
                    height: '100%',
                    flexDirection: 'column',
                    justifyContent: 'space-between',
                    paddingLeft: 8,
                  }}>
                  <View>
                    <View
                      style={{
                        flexDirection: 'row',
                        alignItems: 'center',
                        justifyContent: 'space-between',
                      }}>
                      <Text
                        style={{
                          textTransform: 'capitalize',
                          fontWeight: 'bold',
                          flexShrink: 1,
                        }}>
                        {item.product.product_name}
                      </Text>
                    </View>
                    <View
                      style={{
                        flexDirection: 'row',
                        alignItems: 'center',
                        marginTop: 4,
                      }}>
                      <Text style={{fontSize: 13}}>
                        ${item.product_price_after_discount_when_order_placed}
                      </Text>
                      <Text
                        style={{
                          color: '#8d8d8d',
                          fontSize: 13,
                          textDecorationLine: 'line-through',
                          marginLeft: 6,
                        }}>
                        ${item.product_actual_price_when_order_placed}
                      </Text>
                    </View>
                    <Text style={{marginTop: 4, fontSize: 13}}>
                      Quantity: {item.quantity}
                    </Text>
                  </View>
                  {item.product_shipping_charge_domestic_when_order_placed &&
                  item.product_shipping_charge_domestic_when_order_placed &&
                  item.product_shipping_charge_international_when_order_placed ? (
                    <>
                      <View
                        style={{...styles.horizontalSeparator, marginTop: 0}}
                      />
                      <View>
                        {item.product_shipping_charge_domestic_when_order_placed ? (
                          <View
                            style={{
                              flexDirection: 'row',
                              justifyContent: 'space-between',
                              alignItems: 'center',
                            }}>
                            <Text>Domestic Charge:</Text>
                            <Text style={{color: '#8d8d8d', fontSize: 13}}>
                              $
                              {
                                item.product_shipping_charge_domestic_when_order_placed
                              }
                            </Text>
                          </View>
                        ) : null}
                        {item.product_shipping_charge_international_when_order_placed ? (
                          <View
                            style={{
                              flexDirection: 'row',
                              justifyContent: 'space-between',
                              alignItems: 'center',
                            }}>
                            <Text>International Charge:</Text>
                            <Text style={{color: '#8d8d8d', fontSize: 13}}>
                              $
                              {
                                item.product_shipping_charge_international_when_order_placed
                              }
                            </Text>
                          </View>
                        ) : null}
                      </View>
                    </>
                  ) : null}
                </View>
              </View>
            </Pressable>
            <View style={styles.horizontalSeparator} />
            <View
              style={{
                flexDirection: 'row',
                justifyContent: 'space-between',
                alignItems: 'center',
                marginTop: 10,
              }}>
              <View>
                <SwipeRating
                  imageSize={20}
                  readonly
                  startingValue={item.product.rating_stars}
                />
              </View>
              <Pressable
                onPress={() => {
                  this._onPressTellUsMore();
                  this.setState({feedbackProductUUID: item.product.uuid});
                }}>
                <Text style={{color: 'purple', fontSize: 12}}>
                  Tell us more
                </Text>
              </Pressable>
            </View>

            {item.order_status_id == 6 &&
            item.next_order_status &&
            item.next_order_status_id ? (
              <>
                <View style={{...styles.horizontalSeparator}} />
                <View
                  style={{
                    flexDirection: 'row',
                    justifyContent: 'center',
                    alignItems: 'center',
                    flex: 1,
                    marginTop: 12,
                  }}>
                  <Button
                    onPress={() => this._onUpdateStatusModal(item)}
                    mode="contained"
                    style={{width: '100%', backgroundColor: '#4285F4'}}>
                    Update Status
                  </Button>
                </View>
              </>
            ) : null}
          </View>
        </View>
      </View>
    );
  };

  _onOrderCancel = (order_uuid) => {
    const cancel_product = async () => {
      const token = await AsyncStorage.getItem('token');
      axios
        .post(
          UNIVERSAL_ENTRY_POINT_ADDRESS + API_ORDER_CANCEL_KEY,
          {product_order_uuid: order_uuid},
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          },
        )
        .then((res) => {
          console.log(res);
          this._toastMessage('Your order has been cancelled successfully');
          this.props.navigation.reset({routes: [{name: 'OrdersRoot'}]});
        })
        .catch((err) => {
          console.log({...err});
          alert(err.response.data.message);
        });
    };

    Alert.alert('Hold on!', 'Are you sure you want to cancel this order?', [
      {
        text: 'Cancel',
        onPress: () => null,
        style: 'cancel',
      },
      {
        text: 'YES',
        onPress: () => cancel_product(),
      },
    ]);
  };

  _listFooterComponent = () => {
    const {orderProductsList} = this.state;
    const filtered_order_items = orderProductsList.order_items.filter(
      (order_item) => order_item.order_status_id == 1,
    );
    let is_order_cancellable = false;
    if (filtered_order_items.length === orderProductsList.order_items.length) {
      is_order_cancellable = true;
    }
    return (
      <>
        <View style={{marginTop: 10, backgroundColor: '#fff', padding: 14}}>
          <View>
            <Text
              style={{
                fontWeight: 'bold',
                fontSize: 16,
                textTransform: 'uppercase',
                marginBottom: 4,
              }}>
              Shipping Details
            </Text>
            <View style={{flexDirection: 'row'}}>
              <Text>Name: </Text>
              <Text style={{flexShrink: 1, color: '#8d8d8d'}}>
                {orderProductsList.shipping_address[0].receiver_name}
              </Text>
            </View>
            <View style={{flexDirection: 'row'}}>
              <Text>Address: </Text>
              <Text style={{flexShrink: 1, color: '#8d8d8d'}}>
                {orderProductsList.shipping_address[0].address_line_one}{' '}
                {orderProductsList.shipping_address[0].street_address},{' '}
                {orderProductsList.shipping_address[0].landmark},{' '}
                {orderProductsList.shipping_address[0].locality},{' '}
                {orderProductsList.shipping_address[0].city},{' '}
                {orderProductsList.shipping_address[0].state},{' '}
                {orderProductsList.shipping_address[0].country} -{' '}
                {orderProductsList.shipping_address[0].pincode}
              </Text>
            </View>
            <View style={{flexDirection: 'row'}}>
              <Text>Mobile: </Text>
              <Text style={{flexShrink: 1, color: '#8d8d8d'}}>
                {orderProductsList.shipping_address[0].receiver_phone}
              </Text>
            </View>
          </View>
          <View
            style={{
              ...styles.horizontalSeparator,
              marginTop: 6,
              marginBottom: 6,
            }}
          />
          <View>
            <Text
              style={{
                fontWeight: 'bold',
                fontSize: 16,
                textTransform: 'uppercase',
                marginBottom: 4,
              }}>
              Billing Details
            </Text>
            <View style={{flexDirection: 'row'}}>
              <Text>Name: </Text>
              <Text style={{flexShrink: 1, color: '#8d8d8d'}}>
                {orderProductsList.billing_address[0].receiver_name}
              </Text>
            </View>
            <View style={{flexDirection: 'row'}}>
              <Text>Address: </Text>
              <Text style={{flexShrink: 1, color: '#8d8d8d'}}>
                {orderProductsList.billing_address[0].address_line_one}{' '}
                {orderProductsList.billing_address[0].street_address},{' '}
                {orderProductsList.billing_address[0].landmark},{' '}
                {orderProductsList.billing_address[0].locality},{' '}
                {orderProductsList.billing_address[0].city},{' '}
                {orderProductsList.billing_address[0].state},{' '}
                {orderProductsList.billing_address[0].country} -{' '}
                {orderProductsList.billing_address[0].pincode}
              </Text>
            </View>
            <View style={{flexDirection: 'row'}}>
              <Text>Mobile: </Text>
              <Text style={{flexShrink: 1, color: '#8d8d8d'}}>
                {orderProductsList.billing_address[0].receiver_phone}
              </Text>
            </View>
          </View>
          <View
            style={{
              ...styles.horizontalSeparator,
              marginTop: 6,
              marginBottom: 6,
            }}
          />
          <View>
            <Text
              style={{
                fontWeight: 'bold',
                fontSize: 16,
                textTransform: 'uppercase',
                marginBottom: 4,
              }}>
              Cart Details
            </Text>
            <View style={{flexDirection: 'row'}}>
              <Text>Total Quantity: </Text>
              <Text style={{flexShrink: 1, color: '#8d8d8d'}}>
                {orderProductsList.order_items.length}
              </Text>
            </View>
            <View style={{flexDirection: 'row'}}>
              <Text>Sub Total: </Text>
              <Text style={{flexShrink: 1, color: '#8d8d8d'}}>
                ${orderProductsList.sub_total_amount}
              </Text>
            </View>
            <View style={{flexDirection: 'row'}}>
              <Text>Coupon Discount: </Text>
              <Text style={{flexShrink: 1, color: '#8d8d8d'}}>
                $
                {(
                  parseFloat(
                    orderProductsList.sub_total_amount_after_promo_code_applied,
                  ) - parseFloat(orderProductsList.sub_total_amount)
                ).toFixed(2)}
              </Text>
            </View>
            <View style={{flexDirection: 'row'}}>
              <Text>Shipping Charges: </Text>
              <Text style={{flexShrink: 1, color: '#8d8d8d'}}>
                ${orderProductsList.total_shipping_charges}
              </Text>
            </View>
            <View style={{flexDirection: 'row'}}>
              <Text>Total: </Text>
              <Text style={{flexShrink: 1, color: '#8d8d8d'}}>
                ${orderProductsList.grand_total_amount}
              </Text>
            </View>
          </View>
          <View
            style={{
              ...styles.horizontalSeparator,
              marginTop: 6,
              marginBottom: 6,
            }}
          />
          <Text style={{color: 'red', fontWeight: 'bold', fontSize: 16}}>
            ${orderProductsList.grand_total_amount}
          </Text>
        </View>
        {is_order_cancellable ? (
          <Card
            style={{
              margin: 14,
              borderRadius: 4,
              paddingLeft: 10,
            }}
            onPress={() => this._onOrderCancel(orderProductsList.uuid)}>
            <View
              style={{
                display: 'flex',
                flexDirection: 'row',
                justifyContent: 'space-between',
                alignItems: 'center',
              }}>
              <Text style={{color: '#4d4d4d'}}>Cancel Order</Text>
              {/* <Icon
                type="FontAwesome5"
                name="times"
                color="#4d4d4d"
                style={{fontSize: 20}}
              /> */}
              <IconButton icon="close" color="#4d4d4d" />
            </View>
          </Card>
        ) : null}
      </>
    );
  };

  _toastMessage = (message) => {
    ToastAndroid.showWithGravityAndOffset(
      message,
      ToastAndroid.SHORT,
      ToastAndroid.BOTTOM,
      25,
      50,
    );
  };

  _onFeedbackSubmit = async () => {
    const {feedbackProductUUID, feedbackStars, feedbackContent} = this.state;
    // console.log(this.state.feedbackProductUUID);
    // console.log(this.state.feedbackStars);
    // console.log(this.state.feedbackContent);
    if (feedbackContent.length >= 10 && feedbackStars) {
      const token = await AsyncStorage.getItem('token');
      axios
        .post(
          UNIVERSAL_ENTRY_POINT_ADDRESS + API_FEEDBACK_REVIEW_KEY,
          {
            product_uuid: feedbackProductUUID,
            stars: feedbackStars,
            description: feedbackContent,
          },
          {
            headers: {
              Authorization: `Bearer ${token}`,
            },
          },
        )
        .then((res) => {
          console.log(res);
          alert(res.data.message);
          this._onPressTellUsMore();
        })
        .catch((err) => {
          console.log({...err});
          alert(err.response.data.message);
          this._onPressTellUsMore();
        });
    } else if (feedbackContent.length < 10) {
      this._toastMessage("Review length can't be less than 10 characters!!");
    } else {
      this._toastMessage('Enter all fields properly!');
    }
  };

  render() {
    const {
      feedbackModalVisibility,
      orderProductsList,
      returnProductModalVisibility,
    } = this.state;
    return (
      <View style={{height: '100%'}}>
        {/* <StatusBar backgroundColor="#ffffff" barStyle={'dark-content'} /> */}
        <Header
          placement="left"
          leftComponent={
            <Appbar.BackAction
              color="#fff"
              onPress={() => this.props.navigation.goBack()}
            />
          }
          centerComponent={{
            text: 'Order Product Details',
            style: {
              color: '#fff',
              textTransform: 'capitalize',
              letterSpacing: 0.8,
              fontSize: 16,
              marginLeft: -10,
            },
          }}
          ViewComponent={LinearGradient}
          linearGradientProps={{
            colors: ['#6B23AE', '#FAD44D'],
            start: {x: 0, y: 0},
            end: {x: 1.8, y: 0},
          }}
          // containerStyle={{borderBottomLeftRadius:8, borderBottomRightRadius:8}}
        />

        {!this.state.isLoading ? (
          this.state.isError === '' ? (
            <>
              <FlatList
                ref={(comp) => (this.order_details_flatlist_ref = comp)}
                onScrollToIndexFailed={this._scrollToIndexFailed}
                data={orderProductsList.order_items}
                renderItem={({item, index}) =>
                  this._onRenderOrderProductsList({item, index})
                }
                showsVerticalScrollIndicator={false}
                keyExtractor={(item) => `${item.id}`}
                ListFooterComponent={this._listFooterComponent}
                contentContainerStyle={{paddingTop: 8}}
              />
              {this.state.is_update_status_modal_visible ? (
                <UpdateStatusModal
                  orderItemInfo={this.state.update_status_modal_props_info}
                  onModalClose={() => this._onModalClose()}
                  onReloadData={() => this._reloadComponent()}
                />
              ) : null}
            </>
          ) : (
            <View
              style={{
                height: '100%',
                width: '100%',
                ...StyleSheet.absoluteFill,
                justifyContent: 'center',
                alignItems: 'center',
              }}>
              <Text style={{color: '#8d8d8d', textTransform: 'capitalize'}}>
                {this.state.isError}
              </Text>
            </View>
          )
        ) : (
          <View
            style={{
              ...StyleSheet.absoluteFill,
              height: '100%',
              width: '100%',
              justifyContent: 'center',
              alignItems: 'center',
            }}>
            <ActivityIndicator color="purple" size={25} />
          </View>
        )}

        {feedbackModalVisibility && (
          <View
            style={{
              height: feedbackModalVisibility ? '100%' : null,
              width: feedbackModalVisibility ? '100%' : null,
              position: 'absolute',
              bottom: 0,
              left: 0,
              backgroundColor: feedbackModalVisibility
                ? 'rgba(0,0,0,0.5)'
                : null,
            }}>
            <Modal
              animationType="slide"
              transparent={true}
              visible={feedbackModalVisibility}>
              <SafeAreaView
                style={{
                  ...modals.feedbackModalContainer,
                  borderTopLeftRadius: 8,
                  borderTopRightRadius: 8,
                  height: '70%',
                }}>
                <ScrollView showsVerticalScrollIndicator={false}>
                  <View style={{padding: 10}}>
                    <View
                      style={{
                        flexDirection: 'row',
                        justifyContent: 'space-between',
                        alignItems: 'center',
                        paddingLeft: 20,
                      }}>
                      <Text
                        style={{
                          textTransform: 'uppercase',
                          fontWeight: 'bold',
                          fontSize: 16,
                        }}>
                        {'Feedback & Review'}
                      </Text>
                      <IconButton
                        icon="close"
                        color="#8d8d8d"
                        onPress={this._onPressTellUsMore}
                      />
                    </View>
                    <View
                      style={{
                        marginTop: 4,
                        alignSelf: 'flex-start',
                        paddingHorizontal: 20,
                      }}>
                      <TapRating
                        count={5}
                        defaultRating={parseInt(this.state.feedbackStars)}
                        type="rocket"
                        reviews={['😤', '☹️', '🙂', '😃', '😁']}
                        onFinishRating={this._ratingCompleted}
                        showRating={true}
                        minValue={1}
                        size={25}
                      />
                    </View>
                  </View>
                  <View style={{paddingHorizontal: 20, marginTop: -8}}>
                    {/* <Text>{'What went wrong?'}</Text> */}
                    <TextInput
                      value={this.state.feedbackContent}
                      style={{marginTop: 10, fontSize: 14}}
                      containerStyle={{padding: 10}}
                      mode="outlined"
                      multiline
                      numberOfLines={10}
                      onChangeText={(feedback) =>
                        this._onFeedbackChange(feedback)
                      }
                      placeholder="Write your Feedback here"
                    />
                    <Text style={{textAlign: 'right', marginTop: 6}}>
                      {this.state.feedbackContent.length} / 3000
                    </Text>
                    <Button
                      style={{marginVertical: 20}}
                      mode="contained"
                      onPress={() => this._onFeedbackSubmit()}>
                      Submit
                    </Button>
                  </View>
                </ScrollView>
              </SafeAreaView>
            </Modal>
          </View>
        )}

        {returnProductModalVisibility ? (
          <ReturnProduct
            on_success={(res_msg) => {
              this._toastMessage(res_msg.res);
              this._reloadComponent();
            }}
            on_error={(err_msg) => {
              alert(err_msg.err);
              this._reloadComponent();
            }}
            product_details={this.state.details_of_product_to_be_returned}
            toggleReturnProductModalVisibility={() =>
              this.setState({
                returnProductModalVisibility: !returnProductModalVisibility,
              })
            }
          />
        ) : null}
      </View>
    );
  }
}

const _onToastMessageSent = (message) => {
  ToastAndroid.showWithGravityAndOffset(
    message,
    ToastAndroid.SHORT,
    ToastAndroid.BOTTOM,
    25,
    50,
  );
};

class UpdateStatusModal extends Component {
  constructor(props) {
    super(props);

    this.state = {
      product_current_order_status: {},
      product_next_order_status: {},
    };
  }

  componentDidMount() {
    const {orderItemInfo: order_item_info} = this.props;
    const product_next_order_status = {
      id: order_item_info.next_order_status_id,
      status: order_item_info.next_order_status,
    };
    const product_current_order_status = {
      id: order_item_info.order_status_id,
      status: order_item_info.order_status,
    };

    this.setState({
      product_current_order_status: product_current_order_status,
      product_next_order_status: product_next_order_status,
    });
  }

  _onUpdateOrderItemStatusChange = async () => {
    this.setState({is_submit_loader_visible: true});
    const {orderItemInfo: order_item_info} = this.props;
    console.log('order_item_info = ', order_item_info);
    const token = await AsyncStorage.getItem('token');

    axios
      .post(
        UNIVERSAL_ENTRY_POINT_ADDRESS +
          API_ON_ITEM_RETURNED_BY_BUYER_KEY +
          '/' +
          order_item_info.uuid,
        {},
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        },
      )
      .then((res) => {
        console.log(res);
        _onToastMessageSent(res.data.message);
        this.props.onModalClose();
        this.props.onReloadData();
      })
      .catch((err) => {
        console.log({...err});
        alert(err.response.data.message);
        this.props.onModalClose();
        this.setState({is_submit_loader_visible: false});
      });
  };

  render() {
    const {
      product_current_order_status,
      product_next_order_status,
      is_submit_loader_visible,
    } = this.state;

    return (
      <View
        style={{
          height: '100%',
          width: '100%',
          position: 'absolute',
          bottom: 0,
          left: 0,
          backgroundColor: 'rgba(0,0,0,0.7)',
        }}>
        <Modal animationType="slide" transparent={true} visible={true}>
          <SafeAreaView
            style={{
              backgroundColor: '#fff',
              borderTopLeftRadius: 6,
              borderTopRightRadius: 6,
              height: '40%',
              position: 'absolute',
              bottom: 0,
              left: 0,
              width: '100%',
            }}>
            <ScrollView showsVerticalScrollIndicator={false}>
              <View style={{marginBottom: 80}}>
                <View>
                  <View
                    style={{
                      width: '90%',
                      alignSelf: 'center',
                      marginBottom: 8,
                      marginTop: 15,
                    }}>
                    <Text style={{fontWeight: '700', fontSize: 16}}>
                      Current Status
                    </Text>
                  </View>
                  <View
                    style={{
                      borderWidth: 1,
                      borderColor: '#8d8d8d',
                      borderRadius: 4,
                      width: '90%',
                      alignSelf: 'center',
                    }}>
                    <View
                      style={{
                        display: 'flex',
                        flexDirection: 'row',
                        alignItems: 'center',
                        padding: 10,
                        backgroundColor: 'transparent',
                      }}>
                      <Text
                        style={{
                          textTransform: 'capitalize',
                          flex: 1,
                          flexWrap: 'wrap',
                          color: '#8d8d8d',
                        }}>
                        {product_current_order_status.status}
                      </Text>
                    </View>
                  </View>
                </View>

                <View>
                  <View
                    style={{
                      width: '90%',
                      alignSelf: 'center',
                      marginBottom: 8,
                      marginTop: 15,
                    }}>
                    <Text style={{fontWeight: '700', fontSize: 16}}>
                      Next Status
                    </Text>
                  </View>
                  <View
                    style={{
                      borderWidth: 1,
                      borderColor: '#8d8d8d',
                      borderRadius: 4,
                      width: '90%',
                      alignSelf: 'center',
                    }}>
                    <View
                      style={{
                        display: 'flex',
                        flexDirection: 'row',
                        alignItems: 'center',
                        padding: 10,
                        backgroundColor: 'rgba(66,133,244,0.1)',
                      }}>
                      <Text
                        style={{
                          textTransform: 'capitalize',
                          flex: 1,
                          flexWrap: 'wrap',
                          color: '#4285F4',
                        }}>
                        {product_next_order_status.status}
                      </Text>
                    </View>
                  </View>
                </View>
              </View>
            </ScrollView>

            <View
              style={{
                position: 'absolute',
                bottom: 0,
                left: 0,
                width: '100%',
                display: 'flex',
                alignItems: 'center',
                flexDirection: 'row',
                borderTopWidth: 1,
                borderTopColor: '#eeeeee',
                backgroundColor: '#fff',
              }}>
              {is_submit_loader_visible ? (
                <View
                  style={{
                    margin: 6,
                    padding: 10,
                    display: 'flex',
                    flexDirection: 'row',
                    justifyContent: 'center',
                    alignItems: 'center',
                    width: '100%',
                  }}>
                  <ActivityIndicator size={24} color="#4285F4" />
                </View>
              ) : (
                <>
                  <Button
                    onPress={this.props.onModalClose}
                    mode="contained"
                    style={{
                      flex: 1,
                      backgroundColor: '#DB4437',
                      margin: 10,
                    }}>
                    Cancel
                  </Button>
                  <View
                    style={{
                      ...styles.horizontalSeparator,
                      height: '100%',
                      width: 1,
                      backgroundColor: '#eeeeee',
                    }}
                  />
                  <Button
                    onPress={() => this._onUpdateOrderItemStatusChange()}
                    mode="contained"
                    style={{
                      flex: 1,
                      margin: 10,
                      backgroundColor: '#4285F4',
                    }}>
                    Confirm
                  </Button>
                </>
              )}
            </View>
          </SafeAreaView>
        </Modal>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  headerIcon: {
    marginLeft: 12,
    marginRight: 12,
  },

  gradient: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 5,
    padding: 10,
  },

  orderContainer: {
    width: '95%',
    alignSelf: 'center',
    backgroundColor: 'white',
    borderRadius: 6,
    // marginTop: 10,
    // padding: 14,
  },
  horizontalSeparator: {
    width: '100%',
    height: 1,
    backgroundColor: '#eeeeee',
    marginTop: 10,
  },
});

const modals = StyleSheet.create({
  feedbackModalContainer: {
    width: '100%',
    backgroundColor: 'white',
    position: 'absolute',
    bottom: 0,
    flexDirection: 'column',
    elevation: 20,
  },
});
